const webpack = require('webpack')
const path = require('path')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const {
  VanillaExtractPlugin
} = require('@vanilla-extract/webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const NodePolyfillPlugin = require("node-polyfill-webpack-plugin")
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;


const ENV = [['NODE_ENV', "development"], ['HOST_PUBLIC_PATH_PREFIX', '/']].reduce((env, [key, defaultValue]) => {
  env[key] = process.env[key] || defaultValue
  return env;
}, {})
let mode = ENV.NODE_ENV

module.exports = {
  mode: mode,
  output: {
    publicPath: ENV.PUBLIC_PATH,
  },
  optimization: {
    splitChunks: {
      chunks: 'all',
    },
  },
  module: {
    rules: [
      {
        test: /\.jsx?$/,
        exclude: /node_modules/,
        use: 'babel-loader'
      },
      {
        test: /\.tsx?$/,
        use: 'babel-loader',
        exclude: /node_modules/,
      },
      {
        test: /\.vanilla\.css$/i, // Targets only CSS files generated by vanilla-extract
        use: [
          MiniCssExtractPlugin.loader,
          {
            loader: require.resolve('css-loader'),
            options: {
              url: false // Required as image imports should be handled via JS/TS import statements
            }
          }
        ]
      },
      // {
      //   test: /\.css$/i,
      //   use: [
      //     "style-loader",
      //     "css-loader"
      //   ]
      // },
    ]
  },
  devtool: "source-map",
  devServer: {
    contentBase: "dist",
    hot: true
  },
  resolve: {
    extensions: ['.tsx', '.ts', '.js', '.jsx', '.css'],
    fallback: {
      "fs": false, /* required for @mdx-js/runtime */
      // "tls": false,
      // "net": false,
      // "path": false,
      // "zlib": false,
      // "http": false,
      // "https": false,
      // "stream": false,
      // "crypto": false,
      // "crypto-browserify": require.resolve('crypto-browserify'), //if you want to use this module also don't forget npm i crypto-browserify
    }
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: 'public/index.html'
    }),
    new VanillaExtractPlugin(),
    new MiniCssExtractPlugin(),
    new NodePolyfillPlugin(),
    new webpack.EnvironmentPlugin({
      PUBLIC_PATH: ENV.HOST_PUBLIC_PATH_PREFIX
    }),
    new BundleAnalyzerPlugin({
      analyzerMode: 'json',
      generateStatsFile: true,
      reportFilename: path.join(__dirname, 'build', 'report', 'report.json'),
      statsFilename: path.join(__dirname, 'build', 'report', 'stats.json'),
    })
  ]
}
